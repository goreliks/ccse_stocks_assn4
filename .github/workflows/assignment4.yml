name: assignment4

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Log Start Time
        run: echo "$(date -Iminutes)" > /tmp/log.txt

      - name: Create .env file
        run: echo "NINJA_API_KEY=${{secrets.NINJA_API_KEY}}" > .env

      - name: Log Submitter
        run: echo "Alexander Gorelik" >> /tmp/log.txt

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build stocks service image
        id: build_stocks
        uses: docker/build-push-action@v4
        with:
          context: .
          file: stocks/Dockerfile
          tags: stocks:latest
          outputs: type=docker, dest=/tmp/stocks_image.tar

      - name: Build capital-gains service image
        id: build_capital_gains
        uses: docker/build-push-action@v4
        with:
          context: .
          file: capital-gains/Dockerfile
          tags: capital-gains:latest
          outputs: type=docker, dest=/tmp/capital-gains_image.tar

      - name: Check Build Success
        if: always()
        run: |
          if [ "${{ steps.build_stocks.outcome }}" == "success" ] && [ "${{ steps.build_capital_gains.outcome }}" == "success" ]; then
            echo "image successfully built" >> /tmp/log.txt
          else
            echo "image not able to be built" >> /tmp/log.txt
          fi

      - name: Upload stocks artifact
        uses: actions/upload-artifact@v4
        with:
          name: stocks-image
          path: /tmp/stocks_image.tar

      - name: Upload capital-gains artifact
        uses: actions/upload-artifact@v4
        with:
          name: capital-gains-image
          path: /tmp/capital-gains_image.tar

      - name: Upload log file
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: log
          path: /tmp/log.txt

  test:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download log artifact
        uses: actions/download-artifact@v4
        with:
          name: log
          path: /tmp

      - name: Download stocks artifact
        uses: actions/download-artifact@v4
        with:
          name: stocks-image
          path: /tmp

      - name: Download capital-gains artifact
        uses: actions/download-artifact@v4
        with:
          name: capital-gains-image
          path: /tmp

      - name: Load Stocks service image
        run: docker load --input /tmp/stocks_image.tar

      - name: Load Capital Gains service image
        run: docker load --input /tmp/capital-gains_image.tar

      - name: Create .env file
        run: echo "NINJA_API_KEY=${{secrets.NINJA_API_KEY}}" > .env

      - name: Run Containers
        run: docker compose up -d

      - name: Update log for container status
        run: docker ps | grep -q stocks && docker ps | grep -q capital-gains && echo "Container up and running" >> /tmp/log.txt || echo "Container failed to run" >> /tmp/log.txt

      - name: Wait for container to initialize
        run: sleep 5

      - name: Set up Python
        uses: actions/setup-python@v4

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest
          pip install requests

      - name: Test with pytest
        run: pytest -v tests/assn4_tests.py > /tmp/assn4_test_results.txt

      - name: Ensure Test Results File Exists
        if: always()
        run: touch /tmp/assn4_test_results.txt

      - name: Update Log for Test Results
        if: always()
        run: |
          if grep -q "failed" /tmp/assn4_test_results.txt; then
            echo "tests failed" >> /tmp/log.txt
          else
            echo "tests succeeded" >> /tmp/log.txt
          fi

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: /tmp/assn4_test_results.txt

      - name: Upload Updated Log
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: log
          path: /tmp/log.txt
          overwrite: true

  query:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download stocks artifact
        uses: actions/download-artifact@v4
        with:
          name: stocks-image
          path: /tmp

      - name: Download capital-gains artifact
        uses: actions/download-artifact@v4
        with:
          name: capital-gains-image
          path: /tmp

      - name: Load Stocks service image
        run: docker load --input /tmp/stocks_image.tar

      - name: Load Capital Gains service image
        run: docker load --input /tmp/capital-gains_image.tar

      - name: Create .env file
        run: echo "NINJA_API_KEY=${{secrets.NINJA_API_KEY}}" > .env

      - name: Run Containers
        run: docker compose up -d

      - name: Add Stocks to Database
        run: |
          curl -X POST -H "Content-Type: application/json" -d '{"name":"NVIDIA Corporation","symbol":"NVDA","purchase price":134.66,"purchase date":"18-06-2024","shares":7}' http://localhost:5001/stocks
          curl -X POST -H "Content-Type: application/json" -d '{"name":"Apple Inc.","symbol":"AAPL","purchase price":183.63,"purchase date":"22-02-2024","shares":19}' http://localhost:5001/stocks
          curl -X POST -H "Content-Type: application/json" -d '{"name":"Alphabet Inc.","symbol":"GOOG","purchase price":140.12,"purchase date":"24-10-2024","shares":14}' http://localhost:5001/stocks
          curl -X POST -H "Content-Type: application/json" -d '{"name":"Tesla, Inc.","symbol":"TSLA","purchase price":194.58,"purchase date":"28-11-2022","shares":32}' http://localhost:5001/stocks
          curl -X POST -H "Content-Type: application/json" -d '{"name":"Microsoft Corporation","symbol":"MSFT","purchase price":420.55,"purchase date":"09-02-2024","shares":35}' http://localhost:5001/stocks
          curl -X POST -H "Content-Type: application/json" -d '{"name":"Intel Corporation","symbol":"INTC","purchase price":19.15,"purchase date":"13-01-2025","shares":10}' http://localhost:5001/stocks

      - name: Read and Process Query File
        run: |
          RESPONSE_FILE=/tmp/response.txt
          QUERY_FILE=query.txt
          
          # Ensure response.txt is empty before processing
          > $RESPONSE_FILE
          
          while IFS= read -r line; do
            # Parse the service name and query string
            SERVICE=$(echo "$line" | cut -d':' -f1)
            QUERY_STRING=$(echo "$line" | cut -d':' -f2 | xargs)
  
            # Formulate the URL based on the service
            if [[ $SERVICE == "stocks" ]]; then
              URL="http://localhost:5001/stocks?$QUERY_STRING"
            elif [[ $SERVICE == "capital-gains" ]]; then
              URL="http://localhost:5003/capital-gains?$QUERY_STRING"
            else
              echo "Unknown service: $SERVICE" >> $RESPONSE_FILE
              continue
            fi
  
            # Execute the GET request and capture the response
            RESPONSE=$(curl -s "$URL")
  
            # Append the query and response to the response file
            echo "query: $line" >> $RESPONSE_FILE
            echo "response: $RESPONSE" >> $RESPONSE_FILE
          done < $QUERY_FILE

      - name: Ensure Response File Exists
        if: always()
        run: touch /tmp/response.txt
          
      - name: Upload Response File
        uses: actions/upload-artifact@v4
        with:
          name: response
          path: /tmp/response.txt